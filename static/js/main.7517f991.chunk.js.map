{"version":3,"sources":["serviceWorker.js","components/Button.js","components/Calculator.js","index.js"],"names":["Boolean","window","location","hostname","match","Button","props","react_default","a","createElement","Col","md","className","onClick","onclick","number","Calculator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleAction","e","console","log","operator","target","textContent","setState","prevState","total","current","handleType","value","state","getResult","calculate","clearResult","bind","assertThisInitialized","prevProps","sign","parseInt","Container","fluid","Row","noGutters","InputGroup","Text","components_Button","React","Component","ReactDOM","render","components_Calculator","handleClick","num","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oIAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,oJCJSC,EAXA,SAACC,GAEhB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,UAAU,aACtBL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,MAAMC,QAAWP,EAAMQ,SAAUR,EAAMS,mCC+F9CC,cAlGb,SAAAA,EAAaV,GAAM,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMd,KA6BRkB,aAAe,SAACC,GACdC,QAAQC,IAAI,eACZ,IAAMC,EAAWH,EAAEI,OAAOC,YAC1BJ,QAAQC,IAAIC,GACZX,EAAKc,SAAS,SAACC,GACb,MAAO,CACLC,MAAQD,EAAUE,QAClBN,SAAUA,EACVM,QAAQ,MAtCKjB,EA0CnBkB,WAAa,SAACV,GACZ,IAAMW,EAAQX,EAAEI,OAAOC,YACvBJ,QAAQC,IAAI,oBAAqBS,GACjCnB,EAAKc,SAAS,CAACG,QAASE,IAC1BV,QAAQC,IAAIV,EAAKoB,QA9CEpB,EAiDnBqB,UAAY,WACVZ,QAAQC,IAAI,SACZV,EAAKc,SAAS,CAACG,QAASjB,EAAKsB,UAAUtB,EAAKoB,MAAMT,SAAUX,EAAKoB,MAAMH,WACvER,QAAQC,IAAIV,EAAKoB,MAAMH,UApDNjB,EAuDnBuB,YAAc,WACZvB,EAAKc,SAAS,CAACG,QAAU,KAtDzBjB,EAAKoB,MAAQ,CAAEH,QAAS,EAAGN,SAAU,GAAIK,MAAO,GAChDhB,EAAKkB,WAAalB,EAAKkB,WAAWM,KAAhBvB,OAAAwB,EAAA,EAAAxB,CAAAD,IAClBA,EAAKsB,UAAYtB,EAAKsB,UAAUE,KAAfvB,OAAAwB,EAAA,EAAAxB,CAAAD,IACjBA,EAAKO,aAAeP,EAAKO,aAAaiB,KAAlBvB,OAAAwB,EAAA,EAAAxB,CAAAD,IACpBA,EAAKqB,UAAYrB,EAAKqB,UAAUG,KAAfvB,OAAAwB,EAAA,EAAAxB,CAAAD,IACjBA,EAAKuB,YAAcvB,EAAKuB,YAAYC,KAAjBvB,OAAAwB,EAAA,EAAAxB,CAAAD,IAPFA,kFAUA0B,GACbvB,KAAKd,MAAM4B,UAAYS,EAAUT,SACnCd,KAAKW,SAAS,CAACG,QAAUd,KAAKiB,MAAMH,4CAI9BU,EAAM7B,GACd,MAAa,MAAT6B,GACFlB,QAAQC,IAAIP,KAAKiB,MAAMJ,OACvBP,QAAQC,IAAIkB,SAASzB,KAAKiB,MAAMJ,MAAQlB,IACjC8B,SAASzB,KAAKiB,MAAMJ,MAAQlB,IACjB,MAAT6B,EACFC,SAASzB,KAAKiB,MAAMJ,MAAQlB,GACjB,MAAT6B,EACFC,SAASzB,KAAKiB,MAAMJ,MAAQlB,GACjB,MAAT6B,EACFC,SAASzB,KAAKiB,MAAMJ,MAAQlB,QAD9B,mCAkCT,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAWlC,UAAU,YAAYmC,OAAO,GACtCxC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAKC,WAAW,GAChB1C,EAAAC,EAAAC,cAACyC,EAAA,EAAD,KACE3C,EAAAC,EAAAC,cAACyC,EAAA,EAAWC,KAAZ,CAAiBvC,UAAU,SAASQ,KAAKiB,MAAMH,WAGjD3B,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAKC,WAAW,GAChB1C,EAAAC,EAAAC,cAAC2C,EAAD,CAAQrC,OAAU,EAAGD,QAAWM,KAAKe,aACrC5B,EAAAC,EAAAC,cAAC2C,EAAD,CAAQrC,OAAU,EAAGD,QAAWM,KAAKe,aACrC5B,EAAAC,EAAAC,cAAC2C,EAAD,CAAQrC,OAAU,EAAGD,QAAWM,KAAKe,aACrC5B,EAAAC,EAAAC,cAAC2C,EAAD,CAAQrC,OAAU,IAAKD,QAAWM,KAAKI,gBAEvCjB,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAKC,WAAW,GAChB1C,EAAAC,EAAAC,cAAC2C,EAAD,CAAQrC,OAAU,EAAGD,QAAWM,KAAKe,aACrC5B,EAAAC,EAAAC,cAAC2C,EAAD,CAAQrC,OAAU,EAAGD,QAAWM,KAAKe,aACrC5B,EAAAC,EAAAC,cAAC2C,EAAD,CAAQrC,OAAU,EAAGD,QAAWM,KAAKe,aACrC5B,EAAAC,EAAAC,cAAC2C,EAAD,CAAQrC,OAAU,IAAKD,QAAWM,KAAKI,gBAEvCjB,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAKC,WAAW,GAChB1C,EAAAC,EAAAC,cAAC2C,EAAD,CAAQrC,OAAU,EAAGD,QAAWM,KAAKe,aACrC5B,EAAAC,EAAAC,cAAC2C,EAAD,CAAQrC,OAAU,EAAGD,QAAWM,KAAKe,aACrC5B,EAAAC,EAAAC,cAAC2C,EAAD,CAAQrC,OAAU,EAAGD,QAAWM,KAAKe,aACrC5B,EAAAC,EAAAC,cAAC2C,EAAD,CAAQrC,OAAU,IAAKD,QAAWM,KAAKI,gBAEvCjB,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAKC,WAAW,GAChB1C,EAAAC,EAAAC,cAAC2C,EAAD,CAAQrC,OAAU,EAAGD,QAAWM,KAAKe,aACrC5B,EAAAC,EAAAC,cAAC2C,EAAD,CAAQrC,OAAU,IAAKD,QAAWM,KAAKkB,YACvC/B,EAAAC,EAAAC,cAAC2C,EAAD,CAAQrC,OAAU,IAAKD,QAAWM,KAAKoB,cACvCjC,EAAAC,EAAAC,cAAC2C,EAAD,CAAQrC,OAAU,IAAKD,QAAWM,KAAKI,yBA1FtB6B,IAAMC,WCa/BC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,CAAYC,YAAa,SAACC,GAAD,OAASjC,QAAQC,IAAIgC,MAASC,SAASC,eAAe,SHgHzF,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7517f991.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport Col from 'react-bootstrap/Col';\n\nconst Button = (props) => {\n\nreturn (\n  <div>\n    <Col md={4} className=\"no-gutter\">\n    <button className=\"num\" onClick = {props.onclick}>{props.number}</button>\n    </Col>\n  </div>\n)\n}\n\nexport default Button;","import React from 'react';\nimport Button from \"./Button\";\nimport { Row, Container,InputGroup} from 'react-bootstrap';\n\nclass Calculator extends React.Component {\n  constructor (props){\n    super(props);\n    this.state = { current: 0, operator: '', total: 0};\n    this.handleType = this.handleType.bind(this);\n    this.calculate = this.calculate.bind(this);\n    this.handleAction = this.handleAction.bind(this);\n    this.getResult = this.getResult.bind(this);\n    this.clearResult = this.clearResult.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.current !== prevProps.current){\n      this.setState({current : this.state.current});\n    }\n  }\n\n  calculate(sign, number){\n    if (sign === \"-\"){\n      console.log(this.state.total);\n      console.log(parseInt(this.state.total - number));\n      return parseInt(this.state.total - number);\n    } else if (sign === \"+\"){\n      return parseInt(this.state.total + number);\n    } else if (sign === \"*\"){\n      return parseInt(this.state.total * number);\n    } else if (sign === \"/\"){\n      return parseInt(this.state.total / number);\n    }\n  }\n\n  handleAction = (e) => {\n    console.log(\"hello again\");\n    const operator = e.target.textContent;\n    console.log(operator);\n    this.setState((prevState) => {\n      return {\n        total : prevState.current,\n        operator: operator,\n        current:0\n      }\n    });\n  }\n  handleType = (e) => {\n    const value = e.target.textContent;\n    console.log(\"This is the value\", value);\n    this.setState({current: value})\n  console.log(this.state);\n}\n\n  getResult = () => {\n    console.log(\"hello\");\n    this.setState({current: this.calculate(this.state.operator, this.state.current)});\n    console.log(this.state.current)\n  }\n\n  clearResult = () => {\n    this.setState({current : 0})\n  }\n  render(){\n  return (\n    <div>\n      <Container className=\"container\" fluid={true}>\n        <Row noGutters={true}>\n        <InputGroup>\n          <InputGroup.Text className=\"input\">{this.state.current}</InputGroup.Text>\n        </InputGroup>\n        </Row>\n        <Row noGutters={true}>\n        <Button number = {1} onclick = {this.handleType}/>\n        <Button number = {2} onclick = {this.handleType}/>\n        <Button number = {3} onclick = {this.handleType}/>\n        <Button number = {\"+\"} onclick = {this.handleAction}/>\n        </Row>\n        <Row noGutters={true}>\n        <Button number = {4} onclick = {this.handleType}/>\n        <Button number = {5} onclick = {this.handleType}/>\n        <Button number = {6} onclick = {this.handleType}/>\n        <Button number = {\"-\"} onclick = {this.handleAction}/>\n        </Row>\n        <Row noGutters={true}>\n        <Button number = {7} onclick = {this.handleType}/>\n        <Button number = {8} onclick = {this.handleType}/>\n        <Button number = {9} onclick = {this.handleType}/>\n        <Button number = {\"*\"} onclick = {this.handleAction}/>\n        </Row>\n        <Row noGutters={true}>\n        <Button number = {0} onclick = {this.handleType}/>\n        <Button number = {\"=\"} onclick = {this.getResult}/>\n        <Button number = {\"C\"} onclick = {this.clearResult}/>\n        <Button number = {\"/\"} onclick = {this.handleAction}/>\n        </Row>\n        </Container>\n        \n    </div>\n  )\n}\n}\n\nexport default Calculator;\n","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import Calculator from \"./components/Calculator\";\n\n// ReactDOM.render(<Calculator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Calculator from './components/Calculator';\n\nReactDOM.render(<Calculator handleClick={(num) => console.log(num)}/>, document.getElementById(\"root\"));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}